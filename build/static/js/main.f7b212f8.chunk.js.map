{"version":3,"sources":["email_comp.js","App.js","serviceWorker.js","index.js"],"names":["Email","props","myChangeHandler","event","nam","target","name","val","value","setState","mySubmitHandler","preventDefault","axios","post","state","mail","then","res","console","log","data","sent","msg","this","class","align","id","className","onSubmit","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAqDeA,G,kBA/Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACvB,EAAKC,SAAL,eAAgBL,EAAMG,KAXL,EAcnBG,gBAAkB,SAACP,GACjBA,EAAMQ,iBACNC,IAAMC,KAAK,+BAAgC,CAAC,MAAS,EAAKC,MAAMC,OAC7DC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,SAEpB,EAAKX,SAAS,CAACY,MAAM,EAAMN,KAAM,MAlBjC,EAAKD,MAAQ,CACXC,KAAM,GACNM,MAAM,GAJS,E,sEAwBjB,IAAIC,EAKJ,OAJIC,KAAKT,MAAMO,OACbC,EAAM,yBAAKE,MAAM,WAAU,uBAAGC,MAAM,SAASC,GAAG,MAArB,uCAI3B,6BAEKJ,EACD,yBAAKK,UAAU,WACb,0BAAMC,SAAUL,KAAKb,iBACrB,yBAAKiB,UAAU,SACX,yBAAKA,UAAU,SAAf,cACA,2BAAOA,UAAU,YAAWE,KAAK,QAAQvB,KAAK,OAAOE,MAAOe,KAAKT,MAAMC,KAAMe,SAAUP,KAAKrB,kBAC5F,2BAAOyB,UAAU,eAAeE,KAAK,SAASrB,MAAM,oB,GAvChDuB,IAAMC,YCUXC,E,iLARX,OACI,6BACC,kBAAC,EAAD,W,GALSF,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.f7b212f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './email.css';\r\n\r\n\r\nclass Email extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mail: '',\r\n      sent: false\r\n    };\r\n  }\r\n\r\n  myChangeHandler = (event) => {\r\n    let nam = event.target.name;\r\n    let val = event.target.value;\r\n    this.setState({[nam]: val});\r\n  }\r\n\r\n  mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    axios.post('http://localhost:8000/email/', {'email': this.state.mail})\r\n      .then(res => {\r\n        console.log(res.data);\r\n      })\r\n    this.setState({sent: true, mail: ''})\r\n  }\r\n\r\n  render() {\r\n    let msg;\r\n    if (this.state.sent) {\r\n      msg = <div class='success'><p align=\"center\" id='su'>Mail enregistré avec succés</p></div>;\r\n    }\r\n\r\n    return(\r\n      <div>\r\n\r\n          {msg}\r\n          <div className='central'>\r\n            <form onSubmit={this.mySubmitHandler}>\r\n            <div className='email'>\r\n                <div className='title'>Votre mail</div>\r\n                <input className='emailbody'type=\"email\" name=\"mail\" value={this.state.mail} onChange={this.myChangeHandler}></input>\r\n                <input className='submitbutton' type=\"submit\" value=\"Envoyer\"></input>\r\n            </div>\r\n            </form>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Email;\r\n","import React from 'react';\nimport './App.css';\nimport Email from './email_comp'\n\nclass App extends React.Component {\n\n  render() {\n    return(\n        <div>\n         <Email/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}